Manoj is not there
Rajul is not responding 

Albin
1. define a class 							| test 
   create object of the class 				| test 
   
   class Student
   object 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
 class Student
    {

    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");
            Student albin = new Student();
            Student abhirami = new Student();
            Student harsh = new Student();
            Student athira = new Student();
            Console.WriteLine("End of the program");
            Console.Read();
        }
    }   
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Output:
We are creating 4 empty student objects
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   
2. add an attribute to the class			| test 	
Roopa Srinithi & Delisha
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    class Student
    {
        public int rollNumber;
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");

            Student albin = new Student();
            albin.rollNumber = 1001;
            
            Student abhirami = new Student();
            abhirami.rollNumber = 1002;
            
            Student harsh = new Student();
            harsh.rollNumber = 1003;
            
            Student athira = new Student();
            athira.rollNumber = 1004;

            Console.WriteLine("albin rollnumber:" + albin.rollNumber);
            Console.WriteLine($"abhirami rollnumber:{abhirami.rollNumber}");
            Console.WriteLine("harsh rollnumber:{0}", harsh.rollNumber);
            Console.WriteLine("athira rollnumber:" + athira.rollNumber);

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^	
We are creating 4 empty student objects
albin rollnumber:1001
abhirami rollnumber:1002
harsh rollnumber:1003
athira rollnumber:1004
End of the program	
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3. methods									| test 
Ajithmaran is not in the panel


Harsh Jain
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  class Student
    {
        public int rollNumber;
        public void Welcome()
        {
            Console.WriteLine("Welcome " + this.rollNumber + "!");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");

            Student albin = new Student();
            albin.rollNumber = 1001;
            
            Student abhirami = new Student();
            abhirami.rollNumber = 1002;
            
            Student harsh = new Student();
            harsh.rollNumber = 1003;
            
            Student athira = new Student();
            athira.rollNumber = 1004;

            albin.Welcome();
            abhirami.Welcome();
            harsh.Welcome();
            athira.Welcome();
            

            Console.WriteLine("End of the program");
            Console.Read();
        }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are creating 4 empty student objects
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

4. no-arg constructor 						| test 
Srinivasan 

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Student
    {
        public int rollNumber;
        public void Welcome()
        {
            Console.WriteLine("Welcome " + this.rollNumber + "!");
        }
        public Student()
        {
            this.rollNumber = -1;
        }
        
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");

            Student albin = new Student();
            albin.Welcome();
            albin.rollNumber = 1001;
            
            Student abhirami = new Student();
            abhirami.Welcome();
            abhirami.rollNumber = 1002;
            
            Student harsh = new Student();
            harsh.Welcome();
            harsh.rollNumber = 1003;
            
            Student athira = new Student();
            athira.Welcome();
            athira.rollNumber = 1004;

            albin.Welcome();
            abhirami.Welcome();
            harsh.Welcome();
            athira.Welcome();
            

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are creating 4 empty student objects
Welcome -1!
Welcome -1!
Welcome -1!
Welcome -1!
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

5. arg constructor 							| test 

Praveen
Lalasha
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
I
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Student
    {
        public int rollNumber;
        public void Welcome()
        {
            Console.WriteLine("Welcome " + this.rollNumber + "!");
        }
        public Student()
        {
            this.rollNumber = -1;
        }
        public Student(int p_rollNumber)
        {
            this.rollNumber = p_rollNumber;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");

            Student albin = new Student(11);
            albin.Welcome();
            albin.rollNumber = 1001;
            
            Student abhirami = new Student(12);
            abhirami.Welcome();
            abhirami.rollNumber = 1002;
            
            Student harsh = new Student();
            harsh.Welcome();
            harsh.rollNumber = 1003;
            
            Student athira = new Student(14);
            athira.Welcome();
            athira.rollNumber = 1004;

            albin.Welcome();
            abhirami.Welcome();
            harsh.Welcome();
            athira.Welcome();
            

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are creating 4 empty student objects
Welcome 11!
Welcome 12!
Welcome -1!
Welcome 14!
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
II

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 class Student
    {
        private int rollNumber;
        public void Welcome()
        {
            Console.WriteLine("Welcome " + this.rollNumber + "!");
        }
        public Student()
        {
            this.rollNumber = -1;
        }
        public Student(int p_rollNumber)
        {
            this.rollNumber = p_rollNumber;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");

            Student albin = new Student(1001);            
            Student abhirami = new Student(1002);            
            Student harsh = new Student(1003);            
            Student athira = new Student(1004);


            albin.Welcome();
            abhirami.Welcome();
            harsh.Welcome();
            athira.Welcome();
            

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are creating 4 empty student objects
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Ramesh is not in the panel



6. both no-arg arg 							| test 
Solved

7. ToString()								| test 
Veena Lakshmi 
Aurojit 
Palak is not responding	
Srinivasan joined to help to learn 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Student
    {
        private int rollNumber;
        public void Welcome()
        {
            Console.WriteLine("Welcome " + this.rollNumber + "!");
        }
        public Student()
        {
            this.rollNumber = -1;
        }
        public Student(int p_rollNumber)
        {
            this.rollNumber = p_rollNumber;
        }
        public override string ToString()
        {
            return "Hello " + this.rollNumber + "!";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");

            Student albin = new Student(1001);            
            Student abhirami = new Student(1002);            
            Student harsh = new Student(1003);            
            Student athira = new Student(1004);


            albin.Welcome();
            abhirami.Welcome();
            harsh.Welcome();
            athira.Welcome();

            Console.WriteLine(albin);
            Console.WriteLine(abhirami);
            Console.WriteLine(harsh);
            Console.WriteLine(athira);

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are creating 4 empty student objects
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
Hello 1001!
Hello 1002!
Hello 1003!
Hello 1004!
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Palak is not stable as she ill	
	
	
1. no-member derived class 					| test 

Ramesh 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Student
    {
        private int rollNumber;
        public void Welcome()
        {
            Console.WriteLine("Welcome " + this.rollNumber + "!");
        }
        public Student()
        {
            this.rollNumber = -1;
        }
        public Student(int p_rollNumber)
        {
            this.rollNumber = p_rollNumber;
        }
        public override string ToString()
        {
            return "Hello " + this.rollNumber + "!";
        }
    }
    class StudentSubject:Student 
    {
        public StudentSubject(int p_rollNumber):base(p_rollNumber)
        {
            
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");
            Console.WriteLine("*********************Base Class****************");
            Student albin = new Student(1001);            
            Student abhirami = new Student(1002);            
            Student harsh = new Student(1003);            
            Student athira = new Student(1004);


            albin.Welcome();
            abhirami.Welcome();
            harsh.Welcome();
            athira.Welcome();

            Console.WriteLine(albin);
            Console.WriteLine(abhirami);
            Console.WriteLine(harsh);
            Console.WriteLine(athira);


            Console.WriteLine("*********************Derived Class****************");
            StudentSubject ramesh = new StudentSubject(1001);
            StudentSubject aurojit = new StudentSubject(1002);
            StudentSubject veena = new StudentSubject(1003);
            StudentSubject palak = new StudentSubject(1004);


            ramesh.Welcome();
            aurojit.Welcome();
            veena.Welcome();
            palak.Welcome();

            Console.WriteLine(ramesh);
            Console.WriteLine(aurojit);
            Console.WriteLine(veena);
            Console.WriteLine(palak);

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are creating 4 empty student objects
*********************Base Class****************
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
Hello 1001!
Hello 1002!
Hello 1003!
Hello 1004!
*********************Derived Class****************
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
Hello 1001!
Hello 1002!
Hello 1003!
Hello 1004!
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2. add member attribute to derived class 	| test 
Stutee is not there as she is facing network issue
Ganga P Chandran is not there 
Amrutha 


3. method									| test 
Amrutha

4. no-arg constructor 						| test 
5. arg constructor 							| test 
Ramesh 
Amrutha 
6. both no-arg arg 							| test 
7. ToString()								| test 
Amrutha 

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Student
    {
        protected int rollNumber;
        public void Welcome()
        {
            Console.WriteLine("Welcome " + this.rollNumber + "!");
        }
        public Student()
        {
            this.rollNumber = -1;
        }
        public Student(int p_rollNumber)
        {
            this.rollNumber = p_rollNumber;
        }
        public override string ToString()
        {
            return "Hello " + this.rollNumber + "!";
        }
    }
    class StudentSubject:Student 
    {
        protected string subjectName;
        public StudentSubject(int p_rollNumber, string p_subjectName):base(p_rollNumber)
        {
            this.subjectName = p_subjectName;
        }
        public void Print()
        {
            Console.WriteLine($"Roll Number:{base.rollNumber}");
            Console.WriteLine($"Subject Name:{this.subjectName}");
        }
        public override string ToString()
        {
            return "Hello " + base.rollNumber + " is studing the subject " + this.subjectName + "!";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("We are creating 4 empty student objects");
            Console.WriteLine("*********************Base Class****************");
            Student albin = new Student(1001);            
            Student abhirami = new Student(1002);            
            Student harsh = new Student(1003);            
            Student athira = new Student(1004);


            albin.Welcome();
            abhirami.Welcome();
            harsh.Welcome();
            athira.Welcome();

            Console.WriteLine(albin);
            Console.WriteLine(abhirami);
            Console.WriteLine(harsh);
            Console.WriteLine(athira);


            Console.WriteLine("*********************Derived Class****************");
            StudentSubject ramesh = new StudentSubject(1001,"History");
            StudentSubject aurojit = new StudentSubject(1002,"Politics");
            StudentSubject veena = new StudentSubject(1003,"Geography");
            StudentSubject palak = new StudentSubject(1004,"Econmics");

            ramesh.Welcome();
            ramesh.Print();

            aurojit.Welcome();
            aurojit.Print();

            veena.Welcome();
            veena.Print();

            palak.Welcome();
            palak.Print();

            Console.WriteLine(ramesh);
            Console.WriteLine(aurojit);
            Console.WriteLine(veena);
            Console.WriteLine(palak);

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are creating 4 empty student objects
*********************Base Class****************
Welcome 1001!
Welcome 1002!
Welcome 1003!
Welcome 1004!
Hello 1001!
Hello 1002!
Hello 1003!
Hello 1004!
*********************Derived Class****************
Welcome 1001!
Roll Number:1001
Subject Name:History
Welcome 1002!
Roll Number:1002
Subject Name:Politics
Welcome 1003!
Roll Number:1003
Subject Name:Geography
Welcome 1004!
Roll Number:1004
Subject Name:Econmics
Hello 1001 is studing the subject History!
Hello 1002 is studing the subject Politics!
Hello 1003 is studing the subject Geography!
Hello 1004 is studing the subject Econmics!
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



1. class with one method 					| test 
2. derive it override here 					| test 
		3. assign into parent class reference and call method 
		4. copy parent reference to child reference and call method 
		
Thosif is not there 		
Logesh 
	class Phone 
		MakeCall	
	class AndroidPhone:Phone 
		MakeCall 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^		
 class Phone
    {
        virtual public void MakeCall()
        {
            Console.WriteLine("Make Voice Call");
        }
    }
    class AndroidPhone:Phone
    {
        override public void MakeCall()
        {
            Console.WriteLine("Make Video Call");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Start of the program");
            //Derived Class object by base reference and derived reference
            Phone childPhone = new AndroidPhone();
            childPhone.MakeCall();

            AndroidPhone parentAndroid = (AndroidPhone)childPhone;
            parentAndroid.MakeCall();

            Phone anotherChild = parentAndroid;
            anotherChild.MakeCall();

            //base Class object by base reference
            Phone fatherPhone = new Phone();
            fatherPhone.MakeCall();


            Console.WriteLine("End of the program");
            Console.Read();
        }
    }	
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Start of the program
Make Video Call
Make Video Call
Make Video Call
Make Voice Call
End of the program

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. class with no-implementation method 		| test ???
2. derive it override here 					| test 
		3. assign into parent class reference and call method 
		4. copy parent reference to child reference and call method 

Ashish
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 abstract class Phone
    {
        virtual public void MakeCall()
        {
            Console.WriteLine("Make Voice Call");
        }
        abstract public void SendSMS();
    }
    class AndroidPhone:Phone
    {
        override public void MakeCall()
        {
            Console.WriteLine("Make Video Call");
        }
        override public void SendSMS()
        {
            Console.WriteLine("Send SMS");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Start of the program");
            //Derived Class object by base reference and derived reference
            Phone childPhone = new AndroidPhone();
            childPhone.MakeCall();
            childPhone.SendSMS();

            AndroidPhone parentAndroid = (AndroidPhone)childPhone;
            parentAndroid.MakeCall();
            parentAndroid.SendSMS();

            Phone anotherChild = parentAndroid;
            anotherChild.MakeCall();
            anotherChild.SendSMS();

            //base Class object by base reference // ERROR because of abstract class
            /*
            Phone fatherPhone = new Phone();
            fatherPhone.MakeCall();
            */


            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Start of the program
Make Video Call
Send SMS
Make Video Call
Send SMS
Make Video Call
Send SMS
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


1. interface with a method 					| test 
2. implement it in a class 					| test 
		3. assign into parent interface reference and call method 
		4. copy parent reference to child reference and call method 
Savithri
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
interface IPhone
    {
        void MakeCall();
        
        void SendSMS();
    }
    class AndroidPhone:IPhone
    {
        public void MakeCall()
        {
            Console.WriteLine("Make Video Call");
        }
        public void SendSMS()
        {
            Console.WriteLine("Send SMS");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Start of the program");
            //Implemented Class object by base interface reference and implemented reference
            IPhone childPhone = new AndroidPhone();
            childPhone.MakeCall();
            childPhone.SendSMS();

            AndroidPhone parentAndroid = (AndroidPhone)childPhone;
            parentAndroid.MakeCall();
            parentAndroid.SendSMS();

            IPhone anotherChild = parentAndroid;
            anotherChild.MakeCall();
            anotherChild.SendSMS();

            //we cannot creaate the object for interface IPhone
            /*
            IPhone fatherPhone = new IPhone();
            fatherPhone.MakeCall();
            */

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Start of the program
Make Video Call
Send SMS
Make Video Call
Send SMS
Make Video Call
Send SMS
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. interface with a method 						
2. another interface with a method 
3. inherit (1) and (2) into third interface 
4. implement (3) into a class 
5. implement (1) and (2) into a class 

interface IArea
	FindArea 
interface IPermeter
	FindPerimeter 
interface IAreaPerimer:IArea,IPerimeter	

RectangleIAP:IAreaPerimer 
	FindArea
	FindPerimter 

RectangleIAIP:IArea,IPermeter	

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Gokulraj is off the day 
Sebin Benny 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    interface IArea
    {
        int FindArea(int length, int width);
    }

    interface IPerimeter
    {   
        int FindPerimeter(int length, int width);
    }

    interface IAreaPerimeter : IArea, IPerimeter
    {

    }

    class RectangleIAP : IAreaPerimeter
    {
        public int FindArea(int length, int width)
        {
            return length *width;
        }
        public int FindPerimeter(int length, int width)
        {
            return 2 * (length+width);
        }
    }
    class RectangleIAIP : IArea, IPerimeter
    {
        public int FindArea(int length, int width)
        {
            return length * width;
        }
        public int FindPerimeter(int length, int width)
        {
            return 2 * (length + width);
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            IArea area;
            IPerimeter perimeter;
            IAreaPerimeter areaPerimter;

            Console.WriteLine("Start of the program");
            RectangleIAP hall = new RectangleIAP();
            Console.WriteLine("hall area is " + hall.FindArea(20,10));
            Console.WriteLine("hall perimeter is " + hall.FindPerimeter(20, 10));

            area = hall;
            Console.WriteLine("hall area is " + area.FindArea(20, 10));
            
            perimeter = hall;
            Console.WriteLine("hall perimeter is " + perimeter.FindPerimeter(20, 10));

            areaPerimter = hall;
            Console.WriteLine("hall area is " + areaPerimter.FindArea(20, 10));
            Console.WriteLine("hall perimeter is " + areaPerimter.FindPerimeter(20, 10));


            RectangleIAIP room = new RectangleIAIP();

            Console.WriteLine("room area is " + room.FindArea(10, 10));
            Console.WriteLine("room perimeter is " + room.FindPerimeter(10,10));

            area = room;
            Console.WriteLine("room area is " + area.FindArea(20, 10));

            perimeter = room;
            Console.WriteLine("room perimeter is " + perimeter.FindPerimeter(20, 10));

            RectangleIAIP roomFriend = (RectangleIAIP)perimeter;
            Console.WriteLine("room area is " + roomFriend.FindArea(10, 10));
            Console.WriteLine("room perimeter is " + roomFriend.FindPerimeter(20, 10));

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
interface IMileage
	FindMileage
	
interface IAirPollution
	CalculateAirPollution
	
interface IMileagePollution:IMileage,IAirPollution	

class FuelScooter:IMileagePollution 
	FindMileage
	CalculateAirPollution 

class ElecticScooter:IMileage,IAirPollution	
	FindMileage
	CalculateAirPollution 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. interface with a method 
2. interface with a method
3. implement (1) and (2) into class 

Athira
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
interface IFlightClass		!!! Business, Economy
	void DisplayClass(string className);
interface IFlightType		!!! Domestic, Internation
	void DisplayType(string typeName);
	
class CommercialAeroPlane: IFlightClass, IFlightType
	public void DisplayClass(string className){}
	public void DisplayType(string typeName){}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   interface IFlightClass     // !!! Business, Economy
    {
        void DisplayClass(string className);
    }

    interface IFlightType       //!!! Domestic, Internation
    {
        void DisplayType(string typeName);
    }
    class CommercialAeroPlane : IFlightClass, IFlightType
    {
        public void DisplayClass(string className)
        {
            Console.WriteLine("AeroPlane class is " + className);
        }
        public void DisplayType(string typeName)
        {
            Console.WriteLine("AeroPlane type is " + typeName);
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            CommercialAeroPlane economyDomesticFlight = new CommercialAeroPlane();
            CommercialAeroPlane economyInternationalFlight = new CommercialAeroPlane();
            CommercialAeroPlane businessDomesticFlight = new CommercialAeroPlane();
            CommercialAeroPlane businessInternationalFlight = new CommercialAeroPlane();

            economyDomesticFlight.DisplayClass("Economy");
            economyDomesticFlight.DisplayType("Domestic");

            economyInternationalFlight.DisplayClass("Economy");
            economyInternationalFlight.DisplayType("International");

            businessDomesticFlight.DisplayClass("Business");
            businessDomesticFlight.DisplayType("Domestic");

            businessInternationalFlight.DisplayClass("Business");
            businessInternationalFlight.DisplayType("International");

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AeroPlane class is Economy
AeroPlane type is Domestic
AeroPlane class is Economy
AeroPlane type is International
AeroPlane class is Business
AeroPlane type is Domestic
AeroPlane class is Business
AeroPlane type is International
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^	

1. create a sealed function class 
2. inherit (1)

Abhirami
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Program
    {
        class Animal
        {  
            virtual public void Move()
            {
                Console.WriteLine("Animal can move.");
            }
        }
        class Mammal:Animal
        {
            sealed override public void Move()
            {
                Console.WriteLine("Mammal can walk.");
            }
        }

        /*class Cat : Mammal // Compile Time Error
        {
            override public void Move()
            {

            }
        }*/
        static void Main(string[] args)
        {
            Console.WriteLine("Start of the program");
            Mammal cat = new Mammal();
            cat.Move();

            Animal fish = new Animal();
            fish.Move();

            Console.WriteLine("End of the program");
            Console.Read();
        }
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Start of the program
Mammal can walk.
Animal can move.
End of the program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. create a sealed class 
2. inherit (1) check 
   if syntax error, create object to call its function 
   
1. create a class with a abstract function 
2. inherit just	-- dont implement ???  
3. inherit (2) -- implement first one 

1. create a class with a abstract function 
2. inherit just	-- implement it and make method as sealed 
3. inherit (2)  -- try override the method ??? error. if so, just create object.


	

   