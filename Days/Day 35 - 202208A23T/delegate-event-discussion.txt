Anonymous Type, Delegates, Events and Lambda
Learning Outcomes:
	1. Identify the need of lambda expressions and use 
		Where, 
		First, 
		FirstOrDefault, 
		Min, 
		Max, 
		MinBy and MaxBy 
		to write code
	2. Identify the use of Delegate and able to create a program 
		which can hold same signature as delegate 
		that can be assigned to delegates.
Topics: 
	1. Extension Methods
	2. Anonymous Type
	3. Var and Dynamic
	4. Delegates
	5. Events
	6. Anonymous Methods
	7. Lambda Expression
	8. Expression Tree
------------------------------------------------------------------------------
User Defined Types: 
	class[reference type], interface[reference type], enum[value type]
	Delegate[reference type]
------------------------------------------------------------------------------
<class Student>
	
Student stutee = new Student();	//reference to object 
stutee.ProcessMarkList();
------------------------------------------------------------------------------
what is delegate?
	o "delegate" is a reference to method of same delegate signature 
	o analogy: delegate is function/method pointer we had in C/C++
		"safe function pointer"
	o use the keyword "delegate" to define the delegate type 
	o For "message passing ie events", delegate type is playing important role.
		-- message passing : communication between the objects by sharing the message 
		-- "events" the term is from Microsoft to replace "message passing" 
------------------------------------------------------------------------------	
	to call a function using delegate type:
	1. delegate type 
	2. object of delegate type which will refer the method going to be called 
	3. delegate name is used to call the method/function 
------------------------------------------------------------------------------	
delegate vs event:
	delegate - reference to method 
	event - a variable of delegate plus extra facitilities, 
		not local variable, may be instance member
		
how to declare an event:
	we need the delegate.
	if we have the delegate named "opDT"
		[public] event opDT op;
		
what is event and talk about event:
	event is a wrapper around delegate 
	
	event is working in the principle of publisher/subscriber model.
--------------------------------------------------------------Source 	
	delegate void OnAreaChangeDT();
	class Rectangle 
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		public event OnAreaChangeDT OnAreaChange;
		
		public void Calculate()
		{
			//raise the event -- publish the event 
			OnAreaChange();
		}
		
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	
	class Consumer 
		Rectangle myTableTop;
		Rectangle myLaptopDisplay;
		
		public Consumer()
		{
			myTableTop  = new Rectangle();
			myTableTop.OnAreaChange += myTableTop_OnAreaChange;
			
			
			myLaptopDisplay = new Rectangle();
			myLaptopDisplay.OnAreaChange += myLaptopDisplay_OnAreaChange;
		}
		
		void myTableTop_OnAreaChange(){
			Console.WriteLine("1)We handled the OnAreaChange event.");
			Console.WriteLine("1)We are at myTableTop_OnAreaChange.");
		}
		
		void myLaptopDisplay_OnAreaChange(){
			Console.WriteLine("2)We handled the OnAreaChange event.");
			Console.WriteLine("2)We are at myLaptopDisplay_OnAreaChange.");
		}
		
		public void BulkCalculate()
		{
			myTableTop.Calculate();
			myLaptopDisplay.Calculate();
		}
		
	object of rectangle if defined in another class			---  Object Consumer 
	there we can subscribe the event to handle the event. 
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	
	object of the event class is defined 
	add event handler function to the event of the object 
	at the time of calling(raising) the event, 
	the event handler function is called automatically.
	
	
	Main()
	{
		Consumer consumer = new Consumer();
		consumer.BulkCalculate();
	}
------------------------------------------------------------------------------	

