Anonymous Type, Delegates, Events and Lambda
Learning Outcomes:
	1. Identify the need of lambda expressions and use 
		Where, 
		First, 
		FirstOrDefault, 
		Min, 
		Max, 
		MinBy and MaxBy 
		to write code
	2. Identify the use of Delegate and able to create a program 
		which can hold same signature as delegate 
		that can be assigned to delegates.
Topics: 
	1. Extension Methods
	2. Anonymous Type
	3. Var and Dynamic
	4. Delegates
	5. Events
	6. Anonymous Methods
	7. Lambda Expression
	8. Expression Tree
------------------------------------------------------------------------------
User Defined Types: 
	class[reference type], interface[reference type], enum[value type]
	Delegate[reference type]
------------------------------------------------------------------------------
<class Student>
	
Student stutee = new Student();	//reference to object 
stutee.ProcessMarkList();
------------------------------------------------------------------------------
what is delegate?
	o "delegate" is a reference to method of same delegate signature 
	o analogy: delegate is function/method pointer we had in C/C++
		"safe function pointer"
	o use the keyword "delegate" to define the delegate type 
	o For "message passing ie events", delegate type is playing important role.
		-- message passing : communication between the objects by sharing the message 
		-- "events" the term is from Microsoft to replace "message passing" 
------------------------------------------------------------------------------	
	to call a function using delegate type:
	1. delegate type 
	2. object of delegate type which will refer the method going to be called 
	3. delegate name is used to call the method/function 
------------------------------------------------------------------------------	
delegate vs event:
	delegate - reference to method 
	event - a variable of delegate plus extra facitilities, 
		not local variable, may be instance member
		
how to declare an event:
	we need the delegate.
	if we have the delegate named "opDT"
		[public] event opDT op;
		
what is event and talk about event:
	The event keyword is used to declare an event in a publisher class.	
	to declare 
	to raise an event
	to subscribe event with event handler 
	to unsubscribe event ie release event handler 
	
	
What is the Similarity Between Delegates and Events in C#?
	Both Delegates and Events in C# are related to event-driven
	
What is the Difference Between Delegates and Events in C#?
	Delegates vs Events in C#
		A delegate is a reference type variable that holds the reference to a method.	
		An event is a delegate type class member used 
		by the object or class to provide notification 
		to other objects that an event has occurred.
	Keyword
		A delegate is declared using the keyword ‘delegate’.	
		An event is declared using the “event” keyword.	
	Dependency
		Delegates are undependable.	
		Events are depended on delegates.	

choice of delegates or events?		
	The choice of delegates or events is often difficult, 
	because the two language features are similar. 

	Events are even built using the language support for delegates.	
	
	They both offer a late binding scenario: 
	they enable scenarios where a component communicates by calling a method 
	that is only known at run time. 	
	
	They both support single and multiple subscriber methods. 
	You may find this referred to as singlecast and multicast support. 
	They both support similar syntax for adding and removing handlers.
	
	Finally, raising an event and calling a delegate 
	use exactly the same method call syntax.
	
----------------------------------------------------------------------
**********************Events Raise, Handle:**********************
		Event Handling Mechanism OR Event Model 
----------------------------------------------------------------------
	Events in .NET are based on the delegate model. 
	The delegate model follows the observer design pattern, 
	which enables a subscriber to register with and 
	receive notifications from a provider. 	
	
	An "event sender" pushes a notification 
	that an event has happened, 
	and an "event receiver" receives 
	that notification and 
	defines a response to it. 
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Events
	An event is a message sent by an object to signal the occurrence of an action. 
	The action can be caused by user interaction, such as a button click, 
	or it can result from some other program logic, 
	such as changing a property's value. 
	The object that raises the event is called the "event sender".
	
	The event sender doesn't know which object or method 
	will receive (handle) the events it raises.
	
	The event is typically a member of the event sender
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	
	For example, 
	the Click event is a member of the Button class, and 
	the PropertyChanged event is a member of the class 
	that implements the INotifyPropertyChanged interface
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	
	To define an event, you use the C# event keyword 
	in the signature of your event class, 
	and specify the type of delegate for the event.
	
	Typically, to raise an event, you add a method.
	
Event handlers
	To respond to an event, you define an event handler method in the event receiver. 
	This method must match the signature of the delegate for the event you are handling. 
	In the event handler, 
	you perform the actions that are required when the event is raised, 
	such as collecting user input after the user clicks a button. 
	To receive notifications when the event occurs, 
	your event handler method must subscribe to the event.
----------------------------------------------------------------------
	
		